name: Lint, Type-Check, Test, Build and Publish Package

on:
    pull_request:
        branches: [main]
    push:
        branches: [main]
        tags: ["v*"]

jobs:
    uv-check:
        runs-on: ubuntu-latest

        steps:
            - uses: actions/checkout@v4
              with:
                fetch-depth: 0

            - name: Install uv
              uses: astral-sh/setup-uv@v6
              with:
                enable-cache: true

            - name: Check uv.lock (ensure all dependencies up to date)
              run: uv lock --check

    mypy:
        needs: [uv-check]
        runs-on: ubuntu-latest
        env:
            UV_NO_SYNC: true
            UV_FROZEN: true
            UV_PYTHON_DOWNLOADS: never

        strategy:
            matrix:
                python-version: ["3.12", "3.13"]

        steps:
            - uses: actions/checkout@v4

            - name: Set Up Python
              uses: actions/setup-python@v5
              with:
                python-version: ${{matrix.python-version}}

            - name: Install uv
              uses: astral-sh/setup-uv@v6
              with:
                python-version: ${{matrix.python-version}}
                enable-cache: true

            - name: Install mypy From Locked Dependencies
              run: uv sync --no-group dev --group type-check --all-extras

            - name: Store Hashed Python Version
              id: store-hashed-python-version
              run: echo "hashed_python_version=$(uv run -- python -VV | sha256sum | cut -d' ' -f1)"
                >> $GITHUB_OUTPUT

            - uses: actions/cache@v4
              with:
                path: ./.mypy_cache
                key: mypy|${{steps.store-hashed-python-version.outputs.hashed_python_version}}

            - name: Run mypy
              run: uv run -- mypy .  # TODO: Add GitHub workflows output format

    pre-commit:
        runs-on: ubuntu-latest
        env:
            UV_NO_SYNC: true
            UV_FROZEN: true
            UV_PYTHON_DOWNLOADS: never

        steps:
            - uses: actions/checkout@v4

            - name: Set Up Python
              uses: actions/setup-python@v5
              with:
                python-version-file: .python-version

            - name: Install uv
              uses: astral-sh/setup-uv@v6
              with:
                enable-cache: true

            - name: Install pre-commit From Locked Dependencies
              run: uv sync --only-group pre-commit

            - name: Store Hashed Python Version
              id: store-hashed-python-version
              run: echo "hashed_python_version=$(uv run -- python -VV | sha256sum | cut -d' ' -f1)"
                >> $GITHUB_OUTPUT

            - uses: actions/cache@v4
              with:
                path: ~/.cache/pre-commit
                key: pre-commit|${{steps.store-hashed-python-version.outputs.hashed_python_version}}|${{hashFiles('.pre-commit-config.yaml')}}

            - name: Setup pre-commit Environments
              run: uv run -- pre-commit install-hooks

            - name: Store pre-commit Checks Which Require Skipping
              run: echo "SKIP=check-github-workflows,ruff,uv-lock" >> $GITHUB_ENV

            - name: Run pre-commit
              run: uv run -- pre-commit run --all-files --hook-stage manual  # TODO: Add GitHub workflows output format

            - uses: pre-commit-ci/lite-action@v1.1.0
              if: ${{!cancelled()}}

    pytest:
        needs: [uv-check]
        runs-on: ubuntu-latest
        env:
            UV_NO_SYNC: true
            UV_FROZEN: true
            UV_PYTHON_DOWNLOADS: never

        strategy:
            matrix:
                python-version: ["3.12", "3.13"]

        steps:
            - uses: actions/checkout@v4

            - name: Set Up Python
              uses: actions/setup-python@v5
              with:
                python-version: ${{matrix.python-version}}

            - name: Install uv
              uses: astral-sh/setup-uv@v6
              with:
                python-version: ${{matrix.python-version}}
                enable-cache: true

            - name: Install pytest From Locked Dependencies
              run: uv sync --no-group dev --group test --all-extras

            - name: Store Hashed Python Version
              id: store-hashed-python-version
              run: echo "hashed_python_version=$(uv run -- python -VV | sha256sum | cut -d' ' -f1)"
                >> $GITHUB_OUTPUT

            - uses: actions/cache@v4
              with:
                path: ./.pytest_cache
                key: pytest|${{steps.store-hashed-python-version.outputs.hashed_python_version}}

            - name: Run pytest
              run: uv run -- pytest  # TODO: Add GitHub workflows output format

    ruff-lint:
        runs-on: ubuntu-latest
        env:
            UV_NO_SYNC: true
            UV_FROZEN: true
            UV_PYTHON_DOWNLOADS: never

        steps:
            - uses: actions/checkout@v4

            - name: Set Up Python
              uses: actions/setup-python@v5
              with:
                python-version-file: .python-version

            - name: Install uv
              uses: astral-sh/setup-uv@v6
              with:
                enable-cache: true

            - name: Install ruff From Locked Dependencies
              run: uv sync --only-group lint-format

            - name: Store Hashed Python Version
              id: store-hashed-python-version
              run: echo "hashed_python_version=$(uv run -- python -VV | sha256sum | cut -d' ' -f1)"
                >> $GITHUB_OUTPUT

            - uses: actions/cache@v4
              with:
                path: ./.ruff_cache
                key: ruff|${{steps.store-hashed-python-version.outputs.hashed_python_version}}

            - name: Run Ruff
              run: uv run -- ruff check --no-fix --output-format=github

    build:
        needs: [mypy, pre-commit, pytest, ruff-lint, uv-check]
        runs-on: ubuntu-latest
        env:
            UV_NO_SYNC: true
            UV_FROZEN: true
            UV_PYTHON_DOWNLOADS: never

        steps:
            - uses: actions/checkout@v4
              with:
                fetch-depth: 0

            - name: Set Up Python
              uses: actions/setup-python@v5
              with:
                python-version-file: .python-version

            - name: Install uv
              uses: astral-sh/setup-uv@v6
              with:
                enable-cache: true

            - name: Build Package
              run: uv build --no-sources --build

            - name: Save Build Artifacts
              uses: actions/upload-artifact@v4
              with:
                name: built-ccft_pymarkdown-package
                path: dist/

    publish:
        needs: [build]
        runs-on: ubuntu-latest
        environment: publish
        permissions:
            id-token: write

        if: github.ref_type == 'tag'

        steps:
            - uses: actions/checkout@v4

            - name: Install uv
              uses: astral-sh/setup-uv@v6
              with:
                enable-cache: true

            - name: Download Build Artifacts
              uses: actions/download-artifact@v4
              with:
                name: built-ccft_pymarkdown-package
                path: dist/

            - name: Publish to PyPI
              run: uv publish

    test-publish:
        needs: [build]
        runs-on: ubuntu-latest
        environment: test-publish
        permissions:
            id-token: write

        if: github.ref_type != 'tag' && github.event_name != 'pull_request'

        steps:
            - uses: actions/checkout@v4

            - name: Install uv
              uses: astral-sh/setup-uv@v6
              with:
                enable-cache: true

            - name: Download Build Artifacts
              uses: actions/download-artifact@v4
              with:
                name: built-ccft_pymarkdown-package
                path: dist/

            - name: Publish to Test-PyPI
              run: uv publish --index Test-PyPI

    release:
        needs: [publish]
        runs-on: ubuntu-latest
        permissions:
            contents: write
            id-token: write

        if: github.ref_type == 'tag'

        steps:
            - name: Download Build Artifacts
              uses: actions/download-artifact@v4
              with:
                name: built-ccft_pymarkdown-package
                path: dist/

            - name: Sign Build Artifacts
              uses: sigstore/gh-action-sigstore-python@v3.0.1
              with:
                inputs: ./dist/ccft_pymarkdown-*.tar.gz ./dist/ccft_pymarkdown-*.whl

            - name: Create GitHub Release
              env:
                GITHUB_TOKEN: ${{github.token}}
              run: gh release create '${{github.ref_name}}' dist/** --repo '${{github.repository}}'
                --verify-tag --generate-notes

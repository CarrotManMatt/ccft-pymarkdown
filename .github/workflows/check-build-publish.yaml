name: Lint, Type-Check, Test, Build and Publish Package

on:
    pull_request:
        branches: [main]
    push:
        branches: [main]
        tags: ["v*"]

jobs:
    uv-check:
        runs-on: ubuntu-latest

        steps:
            - uses: actions/checkout@v4
              with:
                fetch-depth: 0

            - name: Install uv
              uses: astral-sh/setup-uv@v3
              with:
                enable-cache: true
                cache-dependency-glob: uv.lock

            - name: Install jq
              run: sudo apt-get install jq

            - name: Update local package only
              run: uv lock --upgrade-package $(cat pyproject.toml | uvx --from yq tomlq .project.name
                -M -r)

            - name: Check uv.lock (ensure all dependencies up to date)
              run: uv lock --locked

    mypy:
        needs: uv-check
        runs-on: ubuntu-latest

        strategy:
            matrix:
                python-version: ["3.12", "3.13"]  # TODO: Create matix from pyproject.toml python versions

        steps:
            - uses: actions/checkout@v4

            - name: Install uv
              uses: astral-sh/setup-uv@v3
              with:
                enable-cache: true
                cache-dependency-glob: uv.lock

            - name: Set Up Python
              uses: actions/setup-python@v5
              with:
                python-version: ${{ matrix.python-version }}

            - name: Install mypy From Locked Dependencies
              run: uv sync --python ${{ matrix.python-version }} --no-python-downloads --no-group
                dev --group type-check --frozen

            - name: Save Hashed Python Version
              run: echo "HASHED_PYTHON_VERSION=$(uv run --no-sync --no-python-downloads --python
                ${{ matrix.python-version }} python -VV | sha256sum | cut -d' ' -f1)" >> $GITHUB_ENV

            - uses: actions/cache@v4
              with:
                path: ./.mypy_cache
                key: mypy|${{ env.HASHED_PYTHON_VERSION }}

            - name: Run mypy
              run: uv run --python ${{ matrix.python-version }} --no-sync --no-python-downloads mypy
                .  # TODO: Add GitHub workflows output format

    pre-commit:
        needs: uv-check
        runs-on: ubuntu-latest

        steps:
            - uses: actions/checkout@v4

            - name: Install uv
              uses: astral-sh/setup-uv@v3
              with:
                enable-cache: true
                cache-dependency-glob: uv.lock

            - name: Set Up Python
              uses: actions/setup-python@v5
              with:
                python-version-file: .python-version

            - name: Install pre-commit From Locked Dependencies
              run: uv sync --no-python-downloads --only-group pre-commit --frozen

            - name: Save Hashed Python Version
              run: echo "HASHED_PYTHON_VERSION=$(uv run --no-sync --no-python-downloads --python
                ${{ matrix.python-version }} python -VV | sha256sum | cut -d' ' -f1)" >> $GITHUB_ENV

            - uses: actions/cache@v4
              with:
                path: ~/.cache/pre-commit
                key: pre-commit|${{ env.HASHED_PYTHON_VERSION }}|${{ hashFiles('.pre-commit-config.yaml')}}

            - name: Setup pre-commit Environments
              run: uv run --no-sync --no-python-downloads pre-commit install-hooks

            - name: Store pre-commit Checks Which Require Skipping
              run: echo "SKIP=check-github-workflows,ruff,ruff-format,taplo-format,taplo-lint,uv-lock,yamlfmt"
                >> $GITHUB_ENV

            - name: Run pre-commit
              run: uv run --no-sync --no-python-downloads pre-commit run --all-files --hook-stage
                manual  # TODO: Add GitHub workflows output format

    pytest:
        needs: uv-check
        runs-on: ubuntu-latest

        strategy:
            matrix:
                python-version: ["3.12", "3.13"]  # TODO: Create matix from pyproject.toml python versions

        steps:
            - uses: actions/checkout@v4

            - name: Install uv
              uses: astral-sh/setup-uv@v3
              with:
                enable-cache: true
                cache-dependency-glob: uv.lock

            - name: Set Up Python
              uses: actions/setup-python@v5
              with:
                python-version: ${{ matrix.python-version }}

            - name: Install pytest From Locked Dependencies
              run: uv sync --python ${{ matrix.python-version }} --no-python-downloads --no-group
                dev --group test --frozen

            - name: Save Hashed Python Version
              run: echo "HASHED_PYTHON_VERSION=$(uv run --no-sync --no-python-downloads --python
                ${{ matrix.python-version }} python -VV | sha256sum | cut -d' ' -f1)" >> $GITHUB_ENV

            - uses: actions/cache@v4
              with:
                path: ./.pytest_cache
                key: pytest|${{ env.HASHED_PYTHON_VERSION }}

            - name: Run pytest
              run: uv run --python ${{ matrix.python-version }} --no-sync --no-python-downloads pytest  # TODO: Add GitHub workflows output format

    ruff:
        needs: uv-check
        runs-on: ubuntu-latest

        strategy:
            matrix:
                python-version: ["3.12", "3.13"]  # TODO: Create matix from pyproject.toml python versions

        steps:
            - uses: actions/checkout@v4

            - name: Install uv
              uses: astral-sh/setup-uv@v3
              with:
                enable-cache: true
                cache-dependency-glob: uv.lock

            - name: Set Up Python
              uses: actions/setup-python@v5
              with:
                python-version: ${{ matrix.python-version }}

            - name: Install ruff From Locked Dependencies
              run: uv sync --python ${{ matrix.python-version }} --no-python-downloads --only-group
                lint-format --frozen

            - name: Save Hashed Python Version
              run: echo "HASHED_PYTHON_VERSION=$(uv run --no-sync --no-python-downloads --python
                ${{ matrix.python-version }} python -VV | sha256sum | cut -d' ' -f1)" >> $GITHUB_ENV

            - uses: actions/cache@v4
              with:
                path: ./.ruff_cache
                key: ruff|${{ env.HASHED_PYTHON_VERSION }}

            - name: Run Ruff
              run: uv run --python ${{ matrix.python-version }} --no-sync --no-python-downloads ruff
                check --output-format=github

    taplo-format:
        runs-on: ubuntu-latest

        steps:
            - uses: actions/checkout@v4

            - name: Install uv
              uses: astral-sh/setup-uv@v3
              with:
                enable-cache: true
                cache-dependency-glob: uv.lock

            - name: Set Up Python
              uses: actions/setup-python@v5
              with:
                python-version-file: .python-version

            - name: Install Taplo From Locked Dependencies
              run: uv sync --no-python-downloads --only-group lint-format --frozen

            - name: Run Taplo Formatter
              run: uv run taplo format . --check  # TODO: Add GitHub workflows output format

    taplo-lint:
        runs-on: ubuntu-latest

        steps:
            - uses: actions/checkout@v4

            - name: Install uv
              uses: astral-sh/setup-uv@v3
              with:
                enable-cache: true
                cache-dependency-glob: uv.lock

            - name: Set Up Python
              uses: actions/setup-python@v5
              with:
                python-version-file: .python-version

            - name: Install Taplo From Locked Dependencies
              run: uv sync --no-python-downloads --only-group lint-format --frozen

            - name: Run Taplo Linter
              run: uv run taplo lint . --default-schema-catalogs  # TODO: Add GitHub workflows output format

    yamlfmt:
        runs-on: ubuntu-latest

        steps:
            - uses: actions/checkout@v4

            - name: Install Golang
              uses: actions/setup-go@v5
              with:
                cache: false

            - name: Install yamlfmt
              run: go install github.com/google/yamlfmt/cmd/yamlfmt@latest

            - name: Run yamlfmt
              run: yamlfmt . -lint  # TODO: Add GitHub workflows output format

    build:
        needs: [mypy, pre-commit, pytest, ruff, taplo-format, taplo-lint, yamlfmt]
        runs-on: ubuntu-latest

        steps:
            - uses: actions/checkout@v4
              with:
                fetch-depth: 0

            - name: Install uv
              uses: astral-sh/setup-uv@v3
              with:
                enable-cache: true
                cache-dependency-glob: uv.lock

            - name: Build Package
              run: uv build --no-sources

            - name: Save Build Artifacts
              uses: actions/upload-artifact@v4
              with:
                name: built-ccft_pymarkdown-package
                path: dist/

    publish:
        needs: [build]
        runs-on: ubuntu-latest
        environment: publish
        permissions:
            id-token: write

        if: github.ref_type == 'tag'

        steps:
            - uses: actions/checkout@v4

            - name: Install uv
              uses: astral-sh/setup-uv@v3
              with:
                enable-cache: true
                cache-dependency-glob: uv.lock

            - name: Download Build Artifacts
              uses: actions/download-artifact@v4
              with:
                name: built-ccft_pymarkdown-package
                path: dist/

            - name: Publish to PyPI
              run: uv publish

    test-publish:
        needs: [build]
        runs-on: ubuntu-latest
        environment: test-publish
        permissions:
            id-token: write

        if: github.ref_type != 'tag'

        steps:
            - uses: actions/checkout@v4

            - name: Install uv
              uses: astral-sh/setup-uv@v3
              with:
                enable-cache: true
                cache-dependency-glob: uv.lock

            - name: Download Build Artifacts
              uses: actions/download-artifact@v4
              with:
                name: built-ccft_pymarkdown-package
                path: dist/

            - name: Publish to Test-PyPI
              run: uv publish --publish-url https://test.pypi.org/legacy/

    release:
        needs: [publish]
        runs-on: ubuntu-latest
        permissions:
            contents: write
            id-token: write

        if: github.ref_type == 'tag'

        steps:
            - name: Download Build Artifacts
              uses: actions/download-artifact@v4
              with:
                name: built-ccft_pymarkdown-package
                path: dist/

            - name: Sign Build Artifacts
              uses: sigstore/gh-action-sigstore-python@v3.0.0
              with:
                inputs: ./dist/*.tar.gz ./dist/*.whl

            - name: Create GitHub Release
              env:
                GITHUB_TOKEN: ${{ github.token }}
              run: gh release create '${{ github.ref_name }}' --repo '${{ github.repository }}' --notes
                ""  # TODO: Autogenerate release notes

            - name: Add Signed Build Artifacts To GitHub Release
              env:
                GITHUB_TOKEN: ${{ github.token }}
              run: gh release upload '${{ github.ref_name }}' dist/** --repo '${{ github.repository
                }}'

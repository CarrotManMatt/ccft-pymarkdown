[tool.poetry]
name = "CCFT-PyMarkdown"
version = "v1.1.2"
license = "Apache-2.0"
description = "A Python wrapper around jackdewinter's PyMarkdown linter to suppress errors, caused by custom-formatted tables in Markdown files"
authors = ["Matt Norton <matt@carrotmanmatt.com>"]
readme = "README.adoc"
repository = "https://github.com/CarrotManMatt/ccft-pymarkdown.git"
keywords = ["markdown", "linter", "static analysis"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: Apache Software License",
    "Natural Language :: English",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Quality Assurance",
    "Topic :: Text Processing :: Markup :: Markdown",
    "Typing :: Typed",
]
packages = [{include = "ccft_pymarkdown"}]

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.poetry.scripts]
ccft-pymarkdown = "ccft_pymarkdown.console:run"


[tool.poetry.dependencies]
python = "^3.12"
pymarkdownlnt = "^0.9"
gitpython = "^3.1"
setuptools = "^70.0"

[tool.poetry.group.dev.dependencies]
pytest = "^8.2"
ruff = "^0.4"
pre-commit = "^3.7"
mypy = "^1.10"
yamllint = "^1.35"



[tool.pytest.ini_options]
filterwarnings = ["ignore:'audioop':DeprecationWarning"]

[tool.mypy]
exclude = ["venv/"]
extra_checks = true
warn_unused_configs = true
disallow_untyped_calls = true
disallow_untyped_defs = true
check_untyped_defs = true
disallow_any_generics = true
disallow_any_unimported = true
disallow_any_decorated = true
disallow_any_explicit = true
disallow_subclassing_any = true
disallow_untyped_decorators = true
disallow_incomplete_defs = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
no_implicit_reexport = true
strict_equality = true
warn_unreachable = true

[tool.ruff]
line-length = 95
target-version ="py312"
extend-exclude = [
    "venv/",
    ".vscode",
    ".idea",
    ".pytest_cache",
    ".mypy_cache",
    ".ruff_cache",
    "__pycache__",
]

[tool.ruff.lint]
select = [
    "E",
    "F",
    "W",
    "C",
    "I",
    "N",
    "D",
    "UP",
    "YTT",
    "ANN",
    "ASYNC",
    "S",
    "BLE",
    "FBT",
    "B",
    "A",
    "COM",
    "DTZ",
    "T",
    "DJ",
    "EM",
    "G",
    "INP",
    "PIE",
    "PT",
    "Q",
    "RSE",
    "RET",
    "SLF",
    "SLOT",
    "SIM",
    "TID",
    "TCH",
    "ARG",
    "PTH",
    "TD",
    "FIX",
    "ERA",
    "PGH",
    "PL",
    "TRY",
    "FLY",
    "PERF",
    "RUF",
]
fixable = ["I001", "TCH", "F401", "COM812"]
ignore = [
    "D203",
    "D212",
    "N806",
    "S603",
    "ANN101",
    "UP040",  # NOTE: mypy does not currently support PEP 695 type aliases, so they should not be used
]
task-tags = [
    "TODO",
    "FIXME",
    "HACK",
    "BUG",
    "NOBUG",
    "REQ",
    "IDEA",
    "NOTE",
    "ISSUE",
    "DONE",
]

[tool.ruff.lint.per-file-ignores]
"tests/**/test_*.py" = ["S101"]

[tool.ruff.lint.flake8-pytest-style]
parametrize-values-type = "tuple"

[tool.ruff.lint.mccabe]
max-complexity = 18

[tool.ruff.lint.pycodestyle]
ignore-overlong-task-comments = true
max-doc-length = 95

[tool.ruff.lint.pylint]
allow-magic-value-types = ["str", "bytes", "int"]
max-args = 7
max-returns = 10
max-branches = 19

[tool.ruff.lint.pyupgrade]
keep-runtime-typing = true


[tool.pymarkdown]
mode.strict-config = true
extensions.front-matter.enabled = true
plugins.heading-style.style = "atx"
plugins.ul-style.style = "asterisk"
plugins.ul-start-left.enabled = true
plugins.ul-indent.indent = 4
plugins.no-trailing-spaces.strict = true
plugins.line-length.enabled = false
plugins.ol-prefix.style = "ordered"
plugins.no-inline-html.allow_first_image_element = false
plugins.no-inline-html.allowed_elements = "!--,br"
plugins.hr-style.style = "---"
plugins.code-block-style.style = "fenced"
plugins.code-fence-style.style = "backtick"
